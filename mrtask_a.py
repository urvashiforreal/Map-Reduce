# Which vendors have the most trips, and what is the total revenue generated by that vendor?
from mrjob.job import MRJob
from mrjob.step import MRStep

# We extend the MRJob class 
# This includes our definition of map and reduce functions
class MyMapReduce(MRJob):
    def steps(self):
        return [
            MRStep(
                mapper=self.mapper, reducer=self.combiner),
          
            MRStep(
                reducer=self.reducer
            )
        ]
    # mapper returns the Vendor Id and Total Revenue
    def mapper(self, _, line):
        org = line.split(",")
        if (org[0] != "VendorID") :
            yield (org[0], float(org[16]))

    # The combiner produces only one instance of each origin and sums up corresponding total revenue.
    def combiner(self, org, value):
        l = list(value)
        y = sum(l)       
        x = round(y,2)      
        yield(None , ( str(x),org ))
        
     # reducer to sort based on total revenue in descending order
    def reducer(self, _, word_counts):
        yield ("Vendor Id","Revenue")        
        for count,key in sorted(word_counts, reverse=True):
            yield (key,count)

if __name__ == '__main__':
    MyMapReduce.run()

""" Command:
python MyMapReduce.py input > out1.txt

"""
